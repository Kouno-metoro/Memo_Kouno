関数
    構造
        型名 関数名(引数){処理}
        main関数は必須
        関数名には半角のアルファベット、数字、_が使える。
        １文字目には数字を使えない
        型名で返す値を指定できる。
        int型で整数を、void型を指定すると数値を返さない。
        
    部品化
        自作関数の作成
           型名 関数名(型名 変数名,型名 変数名){処理} 
           main関数の外に置く
           かっこの中に渡された数値を入れる変数を宣言する。(仮引数)
           ポインタ型にすると直接変数の値を変更できる
           変数を使わない場合はvoidを入れる
        宣言
            型名 関数名(型名,型名);
            #includeの後に置く(プロトタイプ宣言)
            かっこの中に渡された数値を入れる変数の型名を宣言する。
            変数を使わない場合はvoidを入れる
            先頭にstaticを付けて宣言すると他ファイルから呼び出せなくなる。
        使用(呼び出す)
            関数名(引数,引数);
            使いたい場所に置く。今までの関数と同じ感じ。
            引数に変数を指定した場合、変数の中身が仮引数にコピーされる。
            コピーという作業が挟まるのでサイズの大きい変数を渡すときはポインタを渡した方が早い
            引数がない場合はかっこのみでよし！ただし、引数なしの関数に限る。 
        使用(戻り値付き)
            変数名=関数名(引数,引数);
            関数名を呼び出しつつ、関数名からの戻り値を変数名に代入する。
            変数名はint型だけでなく、double型もいける。
            printf関数をこれで呼び出すと文字数を返してくる。 
終了・値返し
    return 数値;
        これより後は実行されない。
        数値の部分に数値や変数名を入れると数値を一つだけ返すことができる。
        ポインタも返せる。
        void型の関数の場合は数値を省略する。
    exit(数値);
        プログラムを強制終了する。
        数値に0以外の正の整数を突っ込むと異常終了を伝えることができる。 (規格化されているっぽい)     
コメント
    コメントを残す
        /*コメント*/
        どこにおいてもヨシ！

        //コメント
        一行だけならこれでもよし！
画面表示
    printf関数
        画面表示
            printf("文字列")
            #include<stdio.h>必須  
        エスケープシーケンス・出力変換指定子
            改行
                printf("文字列\n")
                \nの部分で改行  
            整数値表示
                printf("%d%d",変数名,変数名)  
                %dが変数名の数値に置き換わる
                変数名を変数名+変数名などに置き換えられる
            実数値表示
                printf("%f%f",変数名,変数名)
                %fが変数名の数値に置き換わる
                変数名を変数名+変数名などに置き換えられる(変数は実数とする)
                剰余算不可
            頭揃え
                printf("文字列\t文字列");
                printf("文字列\t文字列");
                上下で文字列がそろう
            桁揃えin整数
                printf("%桁数d\n",数値);
                空きスペースは空白を入れて処理する。%0桁数dで空白の代わりに0が入る
            桁揃えin実数
                printf("%全体桁数.小数桁数f\n",数値);
            char型変数の文字を表示  
                printf("%c",変数名);        
            文字列の表示
                printf("%s",変数名);  
                使わなくても行けるが、%が文字列に含まれているものはNG
            メモリアドレスの表示
                printf("%p",&変数名);
疑似命令
    コンパイラ用の命令
    #include<stdio.h>
        printf関数
        scanf関数
        sprintf関数
    #include<memcpy.h>
        memcpy関数
    #include<ctype.h>
        文字コードの判定
    #include<stdlib.h>
        atoi関数
    #include<string.h>
        strcpy関数
        strcat関数
        strcmp関数
    #define 文字列1 文字列2
        文字列2を文字列1と同じ意味で扱う。
        <使いみち>
            1.数値をまとめて管理
            #define LEDpin 1などとすれば一か所変更するだけでプログラム全体の数値を変更可能。そして分かりやすい
            ただし強力過ぎて要らないところまで置き換えてしまうので多用は控える
            2.関数マクロとして
            #define マクロ名(引数) 処理 とすると小規模な処理が楽に書ける。
            なお、処理側にかっこの中に指定した文字があった場合、引数に置き換えるという性質を使っているので意図しない動作に注意
            対処できないこともないがめんどいので止めといた方が無難
            3.ヘッダファイルの二重読み込み対策
            #ifndef 定義名　　　処理　　　　#endifと挟んだ場合、定義名が定義されていると間の処理が無視される。
    enum{名前1,名前2,};
        中に指定された名前を1,2,3…と置き換える。
        名前=数値,とすると振られる番号を指定される。(番号を飛ばして指定すると仕様上欠番が出るので注意)
変数
    宣言
        型名 変数名;
        変数名は半角で。先頭に数字不可
        基本関数の先頭のみで宣言できる(コンパイラによっては動く)

        型名 変数名,変数名;
        まとめて宣言できる

        型名 変数名=数値,変数名=数値
        まとめて宣言＆代入できる

        型名の前にstaticをつけると、寿命が尽きない。
        型名の前にconstを付けると中身を変更できない。
        型名の前にexternを付けるとライブラリ内のグローバル変数を使える
    型名
            整数型 int
            実数型 double  
            静的ローカル変数 static (型名の前に置く)
            ポインタ変数 *型名
            文字変数 char
    型のキャスト変換 (変換する型名)変数名
            一時的に型を変換できる
            printf("%d\n",(int)(1.05*360));
            A=(int)B この時Aはint型であることという書き方
    代入
        変数名 = 数値;
            数値を変数名に置き換え可能
            数値を数式に置き換え可能
        変数名 ='文字';
            char型のみに使える。文字の部分が文字コード（数値）に置き換えられる。
    計算
        加算 +
        減算 -
        乗算 *
        除算 /
        剰余算 %
        数値を変数に加算 +=
        数値を変数から減算 -=
        数値を変数に乗算 *=
        数値を変数に除算 /=
        数値を変数に剰余算 %=
            変数名+=数値と書く
            変数名=変数名+数値と同じ意味
        1加算 ++
        1減算 --
            変数名++と書く

        基本的な計算ルールは数学と同じ
    数字の表記
        10進数 数字
        8進数 0数字
        16進数 0x数字
        文字コード '文字'
    寿命(ローカル変数の場合)
        宣言された関数の中のみ。(正確には宣言された{}の中。)関数が終了すると破棄される。
        おなじ名前の変数でも、関数が別の場合は別々の変数として扱われる。   
        {}の外で宣言された場合は{}内でも使用でき、{}内の処理が終わっても宣言された{}が終わるまで残る。 
    寿命(グローバル変数の場合)
        関数外で宣言された変数。すべての場合で使用できる。(同じソースファイル内)
        宣言と同時に初期化される。   
        同名のローカル変数がある場合はそちらを優先する。
        先頭にstaticを付けて宣言すると他ファイルから値を参照できなくなる
    寿命(静的ローカル変数の場合)
        無し
        宣言された関数が終了しても値を記憶しておく。
        初期化は１回のみなので、宣言と同時に代入する文を書いても初期化されない。
        先頭にstaticを付けて宣言する。必ず初期化すること
入力
    scanf関数
        scanf("入力変換指定子",&変数名);
        #include<stdio.h>必須
        整数を入力する場合 %d
        実数を入力する場合 %lf
        文字列を入力する場合は%s、変数名の前に&を付けない。
        %文字数sで入力できる文字数に制限がかかる。超えた分は切り捨て。スペースが封印される。
        文字列を入力する際、%sの場合スペースが読みこまれない。%[^\n]を使うとよい。

        scanf("入力変換指定子入力変換指定子",&変数名,&変数名)
        このように書くことで複数入力可能
        入力変換指定子の間に文字をはさむとその文字で区切らせて入力させることができる

        scanf("出力変換指定子",配列名);
        このように書くことで文字列を入力できる。
        配列の前の&は書かない。
比較
    if関数
        基本の型
            if(条件式){文;}else{文;}
            条件式が1ならば左の文を、０ならばelseの後ろの文を実行する
            文にif文を入れることも可能
        演算子
            二つの値が等しい ==
            二つの値が等しくない !=
            左の値＜右の値 <
            左の値＞右の値 >
            左の値≧右の値 >=
            左の値≦右の値 <=

            かつ && AND
            または || OR
            否 ! NOT
            if(条件式&&条件式){文}else{文}と使う
            ORはどちらかが１、もしくはどちらも１の時１となる
            NOTは判定結果を逆にするので、(!(条件式))と書くことができる
場合分け
    switch関数
        switch(条件式){
            case 数値:
            実行文;
            break;
            default:
            実行文;
            break;
        }
        条件式と同じ数値にジャンプし、実行文を実行。break文で抜け出す。
        当てはまる数値が無いときはdefault文にジャンプする。
        整数限定。
       
        case 数値:
        case 数値:
        と同じ処理をする場合はまとめることもできる
繰り返し
    for関数
        int 変数名;
        for(変数名=1;変数名<=繰り返し回数;変数名++){
            繰り返す文;
        }
        あらかじめ使う変数を宣言しておく。慣習的にiを使用する。

        for(初期化;条件式;更新){
            繰り返す文;
        }
        要するにこういうこと。式は空白でもよい。（;は書くこと）
        break;文が実行されるとカウントはそのままで繰り返しが終わる。(if文なんかと組み合わせよう！)
    while関数
        while(条件式){
            繰り返す文;
        }
        条件式が１の時繰り返しが終了する
    for関数とwhile関数
        for関数は定数回ループに、whileはそうでない場合に
        forからwhile
            for(;条件式;){文}
        whileからfor
            初期化;
            while(条件式){
                文;
                更新;
            }
    do~while関数
        do{
            文;
        }while(条件式);
        while文とやっていることは変わらない。
        しかし、while文は条件を判定＞ループ内を実行に対し、こちらはループ内を実行＞判定という流れ。
        入力チェックなどに使える
配列
    宣言
        型名 配列名 [要素数]
        型名、配列名は変数に同じ。
        要素数に指定した数の配列が作られる。(変数での指定不可)
        要素数が100の場合は0~99の箱が作られる。

        型名 配列名[要素数]={0番の数値,1番の数値};
        宣言＆まとめて代入できる。
        指定されなかった箱は0が代入される。
        この場合、要素数を省略可。(指定した数値の数だけ箱が作られる)

        配列全体のアドレス=配列名となるっぽい。
    宣言(文字列)
        型名 配列名 [要素数]={'文字','文字','\0'};
        宣言するときにまとめて代入する場合EOS(\0)は必要ない。
        EOSがある場合は要素数を省略可。
        型名 配列名 []="文字列";とまとめることもできる。
    代入
        配列名 [番号]=数値;
        変数と同じ。
        文字も含めてまとめて代入できない。(一個一個代入しましょう。)
    計算
        変数と同じ。
        加算 +
        減算 -
        乗算 *
        除算 /
        剰余算 %
        数値を変数に加算 +=
        数値を変数から減算 -=
        数値を変数に乗算 *=
        数値を変数に除算 /=
        数値を変数に剰余算 %=
            変数名+=数値と書く
            変数名=変数名+数値と同じ意味
        1加算 ++
        1減算 --
            変数名++と書く

        基本的な計算ルールは数学と同じ。
    表示
        配列名[変数名];
        変数で番号を指定できる。
    コピー
        memcpy(コピー先配列名,コピー元配列名,コピー元配列全体のサイズ);
        コピー先＜コピー元となると不具合が発生するので注意
    任意の大きさの配列を作る
        ポインタ変数=malloc(サイズ);
        sizeof()を使うと良き。
        使いたい配列の型の変数を作ってsizeofに突っ込み、返された数値にほしい箱の数を掛ければよい。
        メモリが無いときはNULLを返す。
        voidポインタを返すので任意の方のポインタにキャスト変換してあげよう。
        多用はしないこと。
    メモリ解放
        free(ポインタ);
        これを忘れるとメモリを圧迫する。必ず書こう。
    配列の大きさを変える
        ポインタ変数=realloc(変更したい配列のポインタ,変えたいサイズ);
        多用するとメモリが散らかって重くなるので多用しない方がよい。
変数のサイズ
    sizeof演算子
        sizeof(変数名)
        この演算子が指定した変数のサイズの数値を返す。
        sizeof(配列名)で配列名のサイズに、sizeof(配列名[番号])で配列名の番号番の箱のサイズに置き換わる
        配列の箱が何個あるのか知りたいときに便利(全体のサイズを箱一つのサイズで割ればいい)
文字コードの判定
    変数名に数値を入れると、判定する文字の種類と変数名数値の種類が同じかを返す。
    #include<ctype.h>必須
    英数字
        isalnum(変数名)
    10進数
        isdigit(変数名)
    16進数
        isxdigit(変数名)
    英字
        isalpha(変数名)
    英大文字
        isupper(変数名)
    英小文字
        islower(変数名)
    記号
        ispunct(変数名)
    スペース
        isspace(変数名)
文字列に関する関数
    文字列(数字)を数値に変換・代入
        変数名=atoi(文字列配列名);
        文字列配列名に数字以外が入っている場合は0を返す。符号も変換できる。
        #include<stdlib.h>必須。
    文字列のコピー
        strcpy(コピー先配列名,コピー元配列名);
        コピー元配列名を"文字列"に置き換え可。宣言後にまとめて文字列を代入するときにどうぞ。
        #include<string.h>必須。
    文字数指定文字列コピー
        strncpy(コピー先配列名,コピー元配列名,コピーする文字数);
        コピー先配列名[コピーする文字数]='\0';
        コピー元配列名を"文字列"に置き換え可。宣言後にまとめて文字列を代入するときにどうぞ。
        #include<string.h>必須。
        文字数を指定する場合はEOSを必ず指定すること。
    文字列の連結
        型名 配列名[要素数]="文字列""文字列"
        この場合、二つの文字列が一つの文字列として扱われる。

        strcat(元の文字列が入っている配列,追加する文字列が入っている配列);
        二つの文字列のサイズ以上の大きさが必要なことに注意。
        #include<string.h>必須
    配列にまとめて合成・保存
        sprintf(保存する配列,書式文字列,変数等);
        printf関数と似ている。画面に表示する代わりに文字列を保存する配列に入れるというイメージ。
        書式文字列にはprintfと同じ要領で%dとかを入れる。
        #include<stdio.h>必須
    文字列の入力
        scanf("入力変換指定子",&変数名);
        #include<stdio.h>必須
        文字列を入力する場合は%s、変数名の前に&を付けない。
        %文字数sで入力できる文字数に制限がかかる。超えた分は切り捨て。スペースが封印される。

        scanf("入力変換指定子入力変換指定子",&変数名,&変数名)
        このように書くことで複数入力可能
        入力変換指定子の間に文字をはさむとその文字で区切らせて入力させることができる
    文字数を数える
        strlen(文字配列);
        文字数を返す。
    文字列の比較
        strcmp(文字配列1,文字配列2);
        中身が一致した場合に0を返す。
        #include<string.h>必須
メモリ
    概要
        1と0を表すロッカーがたくさん並んでいる。
        変数や配列はここに収納される。それぞれ固有の番号(アドレス)が付く。
    アドレス
        アドレスを調べる
            printf("%p",&変数名);
            16進数で返される。
            配列全体的のアドレスを調べる場合は&は不要
            配列の場合、配列のアドレス＝[0]の配列のアドレス。以降要素が1増えるとアドレスが4増える。

            &変数名
            変数名のアドレスを求める。配列名はそれ自体がアドレスを示すため、必要ない。
            通常、関数に渡される変数はあくまで中の数値をコピーしているだけ。
            ＞関数で変数の値を直接編集したい場合に使える。
        アドレスと変数名
            アドレス=変数名と考えてよい？   
        アドレスを入れる変数(ポインタ変数)
            *変数名と宣言する。(型ごとにサイズが違うため、このような宣言方法になっている。)  
            アドレスを代入していない場合はNULLを代入しておいたほうが無難？

            ポインタモード
                変数名 と使う
                アドレスを代入できる
            通常変数モード
                *変数名 と使う
                代入されたアドレスの変数と同じ働きをする

                構造体型ポインタの場合は (*構造体ポインタ変数名).要素名 とかく。(かっこをつける)
                もしくは 構造体ポインタ変数名->要素名 とかく。
        関数の値渡し
            関数の仮引数をポインタ型で宣言
            関数のを呼び出すとき、引数を &変数名 とする。
            呼び出した関数が変数名の値を変更できる。

            配列を渡す場合は配列名のみを引数に指定すればよい。
            ただし要素数の情報が渡されないので注意

            特にサイズの大きい変数を関数に渡したいときはポインタを渡した方が早い
        配列のポインタ
            配列名[数字]とポインタ変数[数字]は同じ意味となる。
            つまり、ポインタ変数[数字]は通常変数モードとなっている
構造体
    複数の変数をまとめて管理できる。
    宣言
        struct 構造体タグ名 {
            型名 変数名;
        };
        ;を忘れやすいので注意
    宣言2
        struct 構造体タグ名 変数名
    使用
        変数名.要素名
        これが変数と同じ働きをする
    コピー
        変数名=変数名
        比較や計算はできない
    構造体タグを型名に変更する
        typedef struct 構造体タグ名 設定したい型名;
        これをすると通常の変数と同じように宣言できる。(通常の変数と同じようにあつかえる)
        構造体タグと構造体型を一度に宣言する
        typedef struct 構造体タグ名 {
            型名 変数名;
        }設定したい型名;

        省略版
        構造体タグを省略できる
        typedef struct{
            型名 変数名;
        }設定したい型名;
    宣言3
        typedefを使って宣言した場合
        変数        設定した型名 変数名;
        配列        設定した型名 配列名[要素数];
        ポインタ    設定した型名 *変数名;
        通常の変数や配列と振る舞いは同じ
ファイルの読み書き
    ファイルを開く  
        fopen("ファイル名","モード");
        この関数の戻り値を事前に宣言したFILE型のポインタ変数に突っ込む

        モード
            r	読み込み。ファイルがない時は失敗。
            r+	読み書き。ファイルがない時は失敗。
            w	書き込み。ファイルがあっても空のファイルを作る。
            w+	読み書き。ファイルがあっても空のファイルを作る。
            a	追加書き込み。ファイルがない時は作る。
            a+	追加読み書き。ファイルがない時は作る。
            バイナリの場合はbを付ける(wb等)
    ファイルを閉じる
        fclose(ファイルのポインタ変数); 
        忘れるとほかのプログラムがファイルを開けなくなる。
    文字列を書きこむ
        fprintf(ファイルポインタ,出力変換指定子,変数,変数);
        printf()と同じ。
    文字列を読み込む
        fscanf(ファイルポインタ,入力変換指定子,変数のポインタ);
        ほぼscanf()とおなじ？

        入力変換指定子で指定された種類以外の文字は無視される。
        %dを指定した場合、スペースまで読みこまれる。

        fscanf(ファイルポインタ,"入力変換指定子,入力変換指定子",&変数名,&変数名);
        こう書くとカンマ区切りの文字列や数値を別々の変数に格納できる。
    バイナリデータを書きこむ
        fwrite(書き込む変数のアドレス,書きこむ変数のサイズ,書きこむ変数の数,ファイルポインタ);
        書きこむ変数のサイズはsizeof()で求めよう
        配列や構造体も行ける
        構造体でまとめて書きこむのが楽か
    バイナリデータを読みこむ
        fread(読み込む変数のポインタ,読み込むサイズ,読み込む項目数,ファイルポインタ);
    ソフトの起動時に渡されたファイルを読みこむ
        int main(int argc,char* argv[]);
        argcにコマンドラインの数が格納されている(argc>1ならファイルかオプションを渡されている)
        ファイルは1こで1、オプションは1文字で1カウントになる。
        argvに渡されたファイル名文字配列のポインタが格納されている(要素数1以降に入っている)

        (例)
        while (argc > 0) {
        argc--;
        if (argv[argc][0] == '-') {
            if (argv[argc][1] == 'a')
                printf("-a オプション\n");
            if (argv[argc][1] == 's')
                printf("-s オプション\n");
            
        }
ライブラリ
    ヘッダファイル
        ・多重#include防止
            多重#includeされると宣言が重複してエラー吐く。
            #ifndef~(中身)~#endifでどうぞ。
        ・#include  
            ライブラリの中で使うライブラリを#include
        ・マクロ定義
            #defineでどうぞ
        ・型定義
            構造体のtypedefとかいうやつ。変数を定義してはいけない。
        ・関数のプロトタイプ宣言
            プロトタイプ宣言の項目を参照してちょ
        ・グローバル変数外部参照宣言
            外部のファイルに定義されていますという宣言。
            コンパイラはファイルごとに見るので、ライブラリの中に定義されているグローバル変数を認識していない場合があるため。
            extern宣言の項目を参照してちょ
        ・書いてはあかん
            関数・グローバル変数の定義
    ソースファイル
        ・#include
            中で使うライブラリを#include
        ・(マクロ定義)
            #defineでどうぞ
        ・(型定義)
            ヘッダファイルで定義した構造体を宣言しよう
        ・(プロトタイプ宣言)
            忘れないように
        ・グローバル変数定義
            書くことない
        ・関数定義
            書くことない